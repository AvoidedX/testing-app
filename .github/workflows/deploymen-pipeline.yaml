name: Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.repository }}

jobs:
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Critical fix for tag pushing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # # Required to access all tags

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.release_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi

      - name: Create Git tag
        run: |
          TAG=${{ github.event.inputs.release_version }}
          
          # Check if tag exists locally or remotely
          if git rev-parse "$TAG" >/dev/null 2>&1 || \
             git ls-remote --exit-code origin "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "::notice::Tag $TAG already exists. Skipping tag creation."
            exit 0
          fi

          # Create and push new tag
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git tag "$TAG"
          git push origin "$TAG"

  build-and-push-image:
    name: Build and Push Docker Image
    needs: create-release-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.IMAGE_NAME }}:${{ github.event.inputs.release_version }}
            ${{ secrets.IMAGE_NAME }}:sha-${{ github.sha }}

  deploy:
    name: Deploy to VM
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -euo pipefail
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_version }}
            
            # Stop and remove old container
            docker stop welcome-app || true
            docker rm welcome-app || true
            
            # Run new container
            docker run -d \
              --name welcome-app \
              --restart unless-stopped \
              -p 8000:5000 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_version }}
            
            # Cleanup old images
            docker image prune -af --filter "until=24h"
